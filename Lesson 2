#1.基础回顾
#向量 ---一维
num <- c(1,3,5)#数值型向量
char <- c('a','b','c')#字符型向量
logi <- c(T,T,F,F)# 逻辑型向量
mix <- c(1,2,'a','b') #一个向量中的向量类型必须一致。有字符型，会全部转为字符型
#矩阵 ---二维
matrix(1:20, nrow = 5, ncol = 4)
#数据框 ---二维
my_df <- data.frame(A1 = 1:4, A2 = c(5,6,7,8),
                    A3 = 9:12, A4 = c(13,14,15,16))
数组 ---多维
my_array <- array(1:18, c(2,3,3)) #(数组的内容，排列形式（2行。3列，第三维度也是3)
列表
my_list <- list(num, char, my_df, my_array)# 本表包含了以上所有内容，包含多种形式


#2.文本处理
expression <- data.frame(id = c('gene1', 'gene2', 'gene3'),
                         Soil_A1 = c(0.60, 0.36, 24.24),
                         Air_B1 = c(0.49, 0.31, 24.54),
                         Water_B1 = c(5.32, 0.07, 13.39))
#----高级软件包 tidyr----
install.packages("tidyr")
  library(tidyr)
#宽数据变长数据---gather()
tidy_gather <- 
  gather(expression, key = 'Samplename', value = 'Expression', -id)
#长数据变宽数据---spread()
tidy_spread <- 
  spread(tidy_gather, key = Samplename, value = Expression)

tidy_spread_2 <- 
  spread(tidy_gather, key = id, value = Expression)
#按列分割---separate
tidy_separate <- 
  separate(tidy_gather, col = Samplename, into = c('Source','Samplename'), sep = '_')
按列合并---unite
tidy_unite <- 
  unite(tidy_separate, col = Samplename, c('Source','Samplename'), sep = '_')
#----高级软件包 dplyr----
install.packages("dplyr")
  library(dplyr)
#排序---arrange
dplyr_arrange <- 
  arrange(tidy_gather, id)

dplyr_arrange <- 
  arrange(tidy_gather, id, desc(Expression))#(数据，以id排序，desc降序排序)
#筛选---filter
dplyr_filter <- 
  filter(tidy_gather, Expression > 1)#（数据，条件）

dplyr_filter <- 
  filter(tidy_gather, Expression > 1 & id == 'gene1')#（数据，两个条件）
#筛选---select
dplyr_select <- 
  select(tidy_separate, id, Samplename, Expression)#（数据，需要输出的列1，列2，列n）

dplyr_select <- 
  select(tidy_separate, -Source)#(数据，不要那一个)
#增加新列---mutate
dplyr_mutate <- 
  mutate(tidy_gather , ID = sub( "gene", "Gene", id))
###---管道操作符 %>% --- 直接把上一步产生的结果作为下一个函数调用的输入

tmp <- mutate(tidy_gather, expression = Expression*10)
dplyr_mutate_select <- select(tmp, -Expression )

dplyr_mutate_select <- 
  mutate(tidy_gather, expression = Expression*10) %>% select(-Expression) #%>%管道符是把上一步的结果直接输入使用的，不需要再调用数据
#分组统计---group_by
dplyr_groupby <- 
  group_by(tidy_gather, Samplename) %>% summarise (avg = mean(Expression))
